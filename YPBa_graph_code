import numpy as np
from scipy.interpolate import interp1d

# Define equations for each constant value curve for optimum S/C ratio

coefficients_YPBa = {
    70: [-0.4913, 1.2795, -0.9291, 0.3388],
    65: [-0.4241, 1.1737, -0.9416, 0.3435],
    60: [-0.4453, 1.1905, -0.9653, 0.3397],
    55: [-0.3469, 1.0384, -0.9361, 0.3396],
    50: [-0.2261, 0.796, -0.8046, 0.3128],
    40: [-0.3055, 0.9729, -0.9491, 0.3439]
}

# calculating with the coefficients
# x in this case is S/C

def calculate_y(x, coeffs):
    return coeffs[0]*(x**3) + coeffs[1]*(x**2) + (coeffs[2]*x) + coeffs[3]

# Function to interpolate between curves

def interpolate_curvesYPBa(x, input_value):
    keys = sorted(coefficients_YPBa.keys())
    closest_key = min(keys, key=lambda k: abs(k - input_value))

    if closest_key == input_value:
        return calculate_y(x, coefficients_YPBa[closest_key])
    else:
        lower_key = max(k for k in keys if k < input_value)
        upper_key = min(k for k in keys if k > input_value)

        y_lower = calculate_y(x, coefficients_YPBa[lower_key])
        y_upper = calculate_y(x, coefficients_YPBa[upper_key])

        f = interp1d([lower_key, upper_key], [y_lower, y_upper], axis=0)

        return f(input_value)

# Verification with values from graph
x = 1
a2 = 60

result = interpolate_curvesYPBa(x, a2)
print(f"The result of interpolate_curves is: {result}")